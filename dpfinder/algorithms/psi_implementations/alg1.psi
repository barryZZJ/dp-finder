// ==BEGIN LICENSE==
// 
// MIT License
// 
// Copyright (c) 2018 SRI Lab, ETH Zurich
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// ==END LICENSE==


def main () {
	// DP-enforcement parameters:
	epsilon := 0.1; // epsilon-DP guarantee wanted
	delta := 1; // global sensitivity of the function
	T := 0; // threshold
	
	c := $C;
	input:=[$A];
	bad_output:=[$O];

	epsilon1 := epsilon/2;
	rho := laplace(0, delta/epsilon1);
	epsilon2 := epsilon - epsilon1;

	count := 0;
	for i in [0..input.length) {
		vi := laplace(0, 2*c*delta/epsilon2);
		if count>=c{
			assert(bad_output[i]==0);
		}else if bad_output[i]==1{
			assert((input[i] + vi) >= (T + rho));
			count += 1;
		}else{
			assert((input[i] + vi) < (T + rho));
		}
	}
	return 1;
}
